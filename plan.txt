Org::report_pg
imsiddiquee@cunning-goat-hwvix2.com
tigerhunter3

trailhead orgs
    https://trailhead.salesforce.com/users/profiles/orgs

component available for all pages support by lightning
    implements="flexipage:availableForAllPageTypes" access="global"
page available for only tabs
    implements="force:appHostable
quick action
    implements="force:lightningQuickAction"
    implements="force:lightningQuickActionWithoutHeader"

How to use CSS/style with component
    component   
        <p class="paragraph"> Hello world</p>
    component-style
        .THIS.paragraph{text-shadow: 3x 2x red; color: green; font-style: bold;}

    component   
        <div>
            <p class="paragraph"> Hello world</p>
        </div>
    component-style==> need to put space for one lavel deep div
        .THIS .paragraph{text-shadow: 3x 2x red; color: green; font-style: bold;}

lightning application 
    <aura:application extends="force:slds">
        <c:CarSearchForm/>
    </aura:application>

attribute declare in component
    {!v.attributeName}  ==> it will be updated.
    {#v.attributeName}  ==> it's always fixed.
component-controller
    get value from attribute
        var value=component.get("v.attributeName");
    set attribute value
        component.set("v.attributeName",value);

attribute used in component
    declare
        <aura:attribute name="buttonLabel" type="String" default="Search" />
        <aura:attribute name="examObj" type="contact" default="{}"/>
        <aura:attribute name="car" type="Car__c" access="public" default="{'sObjectType':'Car__c','Name':'Shamim', 'Picture__c':''}"   /> 
        <aura:attribute name="cars" type="Car__c[]" access="public" /> 
        <aura:attribute name="car" type="Object" access="public" default="{'sObjectType':'Contact','LastName':'one','FirstName':'test'}"   /> 
    apply ==> button label
        <lightning:button class="slds-m-top_x-small" label="{!v.buttonLabel}" variant="brand"  title="Brand action" onclick="{! c.handleClick }" />


if condition in component
    
        <aura:if isTrue="{!v.truthy}">
                True
            <aura:set attribute="else">
                False
            </aura:set>
        </aura:if> 

                Implement if on the component

                                            <aura:if isTrue="{!v.isNewAvailable}">
                                                    <lightning:button label="{!v.buttonLabel}" title="Neutral" />
                                                <aura:set attribute="else">
                                                    No button to display
                                                </aura:set>
                                            </aura:if>


looping through arrays and objects
    <aura:iteration items="1,2,3,4,5" var="item">
        <meta value="{!item}" />
    </aura:iteration>

            implement in component
                                    <lightning:select name="selectItem" aura:id="carType" label="All Types" variant="label-hidden" value="">

                                        <option value="" text="All Type"/>
                                        <option value="1" text="Sorts Car"/> 
                                        <option value="2" text="Luxury Car"/>

                                        <aura:iteration items="{!v.carTypes}" var="carType">
                                            <option value="{!carType}" text="{!carType}"/>                            
                                        </aura:iteration>               

                                    </lightning:select>

set value by aura id
    syntax to use it
        aura:id="carType"
    get value by id
        var value=component.find('id').get('v.value');
            var carType = component.find("carType").get("v.value");
    set value by id
        component.find('id').set('new_value');

array declare in controller
    ["Sports Car-2", "Luxury Car-2", "Van-2"]

system events==> init, render
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <aura:handler name="render" value="{!this}" action="{!c.doRender}" />


base component
    <aura:component abstract="true" extensible="true">
        {!v.body}
    </aura:component>

comment 
    component==> <!--  -->

grid system
        <lightning:layout  multipleRows="true">
            <lightning:layoutItem padding="around-small" size="12" smallDeviceSize="6" mediumDeviceSize="4" largeDeviceSize="3">                
            </lightning:layoutItem>
        </lightning:layout>

hyperlink button ==> redirect to another page==>show hide button==> var navEvt=$A.get("e.force:navigateToSOjbect");
        component
                        <aura:attribute type="boolean" name="showLinkButton" access="public" default="false"/>

                        <aure:if isTrue={!v.showLinkButton}>
                            <lightning:button  class="slds-m-top_x-small" label="Full Detail" title="Neutral action" onclick="{! c.handleFullDetail }"/>
                        </aure:if>

        controller

                            doInit:function(component,event,handle){

                                var navEvt=$A.get("e.force:navigateToSOjbect");
                                if(navEvt)
                                {
                                    component.set("v.showLinkButton",true);
                                }
                                else
                                {
                                    component.set("v.showLinkButton",false);             
                                }
                            },

                            handleFullDetail:function(component,event,handle){
                                var navEvt=$A.get("e.force:navigateToSOjbect");
                                if(navEvt)
                                {
                                    //navEvt.setParams({"recordId":component.get("v.car").id,"slideDevName": "related"});
                                    var navEvt = $A.get("e.force:navigateToSObject");
                                    navEvt.setParams({
                                    "recordId": "00QB0000000ybNX",
                                    "slideDevName": "related"
                                    });
                                    
                                    navEvt.fire();
                                }
                                else
                                {
                                    component.set("v.showLinkButton",false);             
                                }
                            }



component event==>child to parent,handle by component itself or the parent component. child==>register the event, parent==> implement the event.
application event==> any component handle this event,like pub-sub. one component envoke the event, another-component ==> implement the event.
aura event==> parent to child,component to component, child==>declare the event, parent==>implement and envoke the child event.

component event
    https://www.biswajeetsamal.com/blog/component-events-in-salesforce-lightning-framework/
    1) Declare a component event.
    2)child register the event
    3)parent envoke the event

component event
                child to parent

                    declare an events==>event name==>SampleComponentEvent
                                                        <!--SampleComponentEvent.evt-->
                                                        <aura:event type="COMPONENT" description="Sample Component Event">
                                                            <aura:attribute name="message" type="String" default="Hello World!!" />
                                                        </aura:event>

                    child ChildForm.cmp
                                                    <!--Child.cmp-->
                                                    <aura:component >
                                                        <aura:registerEvent name="sampleCmpEvent" type="c:SampleComponentEvent" />
                                                        <lightning:button label="Click to fire the event" variant="brand" onclick="{!c.childComponentEvent}"/>
                                                    </aura:component>

                    child ChildFormController.js
                                                    childComponentEvent : function(cmp, event,helper) { 
                                                            //Get the event using registerEvent name. 
                                                            var cmpEvent = cmp.getEvent("sampleCmpEvent"); 
                                                            //Set event attribute value
                                                            cmpEvent.setParams({"message" : "Welcome "}); 
                                                            cmpEvent.fire(); 
                                                        }
                        

                    parent Parent.cmp
                                                    <!--Parent.cmp-->
                                                    <aura:component >
                                                        <aura:attribute name="eventMessage" type="String"/> 
                                                        <aura:handler name="sampleCmpEvent" event="c:SampleComponentEvent" action="{!c.parentComponentEvent}"/>
                                                        <div class="slds-m-around_xx-large">
                                                            <c:Child /> 
                                                            <p>{!v.eventMessage}</p> 
                                                        </div>
                                                    </aura:component>
                        
                    parent ParentController.js

                                                    parentComponentEvent : function(cmp, event) { 
                                                        //Get the event message attribute
                                                        var message = event.getParam("message"); 
                                                        //Set the handler attributes based on event data 
                                                        cmp.set("v.eventMessage", message + 'Biswajeet');         
                                                    } 

aura event
https://www.sfdcpoint.com/salesforce/aura-method-in-lightning-salesforce/
1)child declare the event.
2)parent implement the aura-event.

aura event
            parent to child

                            child component
                                            <!--Child.cmp-->
                                            <aura:component>
                                                <aura:method name="childMessageMethod" action="{!c.getMessage}" access="public">
                                                    <aura:attribute name="childGreetingParam" type="String" default="Hello"/> 
                                                    <aura:attribute name="childPersonNameParam" type="String" default="World"/> 
                                                </aura:method>
                                            </aura:component>

                                                        child controller

                                                        getMessage : function(component, event) {
                                                            //get method paramaters
                                                            var params = event.getParam('arguments');
                                                            if (params) {
                                                                var param1 = params.childGreetingParam;
                                                                var param2 = params.childPersonNameParam;
                                                                alert(param1 + " " + param2);
                                                            }
                                                        }

                            Parent component

                                            <!--Parent cmp-->
                                            <aura:component>  
                                                <div class="slds-m-around_xx-large">
                                                    <!-- Add Child Component -->
                                                    <c:ChildComponent aura:id="childCmp"/>
                                                    <!-- On button click child aura:method will be called-->
                                                    <lightning:button variant="brand" label="Call Child" onclick="{!c.callAuraMethod}" />
                                                </div>
                                            </aura:component>

                                                            parent controller

                                                            callAuraMethod : function(component, event, helper) {
                                                                //Call Child aura method
                                                                var childComponent = component.find("childCmp");
                                                                var message = childComponent.childMessageMethod();
                                                            }



    
        
application event steps==> it's work on pub-sub model
https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/events_application_example.htm
1) declare an application event.
2) component register the event.==>notifier component.
3) component handle the event.==> handler component.

application event

                    declare application event
                                                <!--c:aeEvent-->
                                                <aura:event type="APPLICATION">
                                                    <aura:attribute name="message" type="String"/>
                                                </aura:event>

                    notifier component

                                                <!--c:aeNotifier-->
                                                <aura:component>
                                                    <aura:registerEvent name="appEvent" type="c:aeEvent"/>

                                                    <h1>Simple Application Event Sample</h1>
                                                    <p><lightning:button
                                                        label="Click here to fire an application event"
                                                        onclick="{!c.fireApplicationEvent}" />
                                                    </p>
                                                </aura:component>


                                                            controller

                                                                    fireApplicationEvent : function(cmp, event) {
                                                                        // Get the application event by using the
                                                                        // e.<namespace>.<event> syntax
                                                                        var appEvent = $A.get("e.c:aeEvent");
                                                                        appEvent.setParams({
                                                                            "message" : "An application event fired me. " +
                                                                            "It all happened so fast. Now, I'm everywhere!" });
                                                                        appEvent.fire();
                                                                    }

                    handler component

                                                <!--c:aeHandler-->
                                                <aura:component>
                                                    <aura:attribute name="messageFromEvent" type="String"/>
                                                    <aura:attribute name="numEvents" type="Integer" default="0"/>

                                                    <aura:handler event="c:aeEvent" action="{!c.handleApplicationEvent}"/>

                                                    <p>{!v.messageFromEvent}</p>
                                                    <p>Number of events: {!v.numEvents}</p>
                                                </aura:component>


                                                            controller

                                                                    handleApplicationEvent : function(cmp, event) {
                                                                        var message = event.getParam("message");

                                                                        // set the handler attributes based on event data
                                                                        cmp.set("v.messageFromEvent", message);
                                                                        var numEventsHandled = parseInt(cmp.get("v.numEvents")) + 1;
                                                                        cmp.set("v.numEvents", numEventsHandled);
                                                                    }

calling apex controller method
    https://wedgecommerce.com/calling-apex-controller-method-lightning-component/

                    component==>drop down list/picklist,table,

                                <aura:component controller="entityTypeController" >
                                <!--attribute-->
                                    <aura:attribute name='componentString' type='String' default="Account"  description='Selected entity type'/ >
                                    <aura:attribute name='sObjList' type='sObject[]'  description = 'Returned list from server side controller'/ >

                                <!--declare event-->
                                    <aura:handler name='init' value='{!this}' action='{!c.changeEntity}' description = 'Trigger defined action on initialization of component'/ >


                                        <!-- drop down/picklist -- >
                                        <lightning:select label='Entity Type' name='cmpString' value='{!v.componentString}' onchange='{!c.changeEntity}' >
                                            <option value='Account' >Account </option >
                                            <option value='Contact' >Contact </option >
                                            <option value='Lead' >Lead </option >
                                        </lightning:select >

                                        <!-- fill table with server data -- >
                                        <table class="slds-table slds-table_bordered slds-table_cell-buffer" >
                                            <tr >
                                                <th >Id </th >
                                                <th >Name </th >
                                            </tr >
                                            <aura:iteration items='{!v.sObjList}' var="sObj" >
                                                <tr >
                                                    <td >{!sObj.Id} </td >
                                                    <td >{!sObj.Name} </td >
                                                </tr >     
                                            </aura:iteration >
                                        </table >

                                </aura:component >

                                    controller ==> call apex method

                                                            changeEntity : function(component, event, helper) {
                                                                var action = component.get('c.getEntity'); 
                                                                // method name i.e. getEntity should be same as defined in apex class
                                                                // params name i.e. entityType should be same as defined in getEntity method
                                                                action.setParams({
                                                                    "entityType" : component.get('v.componentString') 
                                                                });
                                                                action.setCallback(this, function(a){
                                                                    var state = a.getState(); // get the response state
                                                                    if(state == 'SUCCESS') {
                                                                        component.set('v.sObjList', a.getReturnValue());
                                                                    }
                                                                });
                                                                $A.enqueueAction(action);
                                                            }

                    soql server controller

                        public class entityTypeController {   
                        
                            @AuraEnabled
                            public static List getEntity(String entityType){
                                List sobj = new List();
                                if(entityType != null) {
                                    String query = 'SELECT Name, Id FROM '+entityType ;
                                    sobj = database.query(query);
                                }
                                return sobj;
                            }

                        }


toast notification in component controller

                        controller
                                        handleSave : function(component, event, helper) {
                                                
                                                
                                                var formData = component.get("v.contactObj");
                                                
                                                var action=component.get("c.saveContact");        
                                                action.setParams({con:formData});
                                                console.log('Save');
                                                
                                                
                                                action.setCallback(this,function(response){
                                                    var state=response.getState();
                                                    console.log('Contact Save'+state);
                                                    if (state === "SUCCESS") {
                                                        helper.showToast(component, event, helper,'Contact created successfully!');
                                                    }
                                                    else if (state === "ERROR") {                
                                                        var errorMessage="Unknown error";
                                                        
                                                        var errors = response.getError();
                                                        if (errors) {
                                                            if (errors[0] && errors[0].message) {
                                                                errorMessage=errors[0].message
                                                            }
                                                        } 
                                                        
                                                        helper.showToast(component, event, helper,errorMessage);
                                                    }
                                                    
                                                    var returnConObj=response.getReturnValue();
                                                    console.log('return Con Obj'+JSON.stringify(returnConObj));;
                                                    
                                                });
                                                
                                                $A.enqueueAction(action);
                                                
                                            }


                                                contoller-helper

                                                                        showToast : function(component, event, helper,message) {
                                                                        var toastEvent = $A.get("e.force:showToast");
                                                                        toastEvent.setParams({
                                                                            "type": "Success",
                                                                            "title": "Success!",
                                                                            "message": message
                                                                        });
                                                                        toastEvent.fire();
                                                                    }



//

attribute with default value==>git==>ComboBoxComponent

  <aura:attribute
    name="options"
    type="List"
    default="[
    {'label': 'New', 'value': 'new'},
    {'label': 'In Progress', 'value': 'inProgress'},
    {'label': 'Finished', 'value': 'finished'},
    ]"
  />

aura if with attribute property

    <aura:if isTrue="{!!empty(v.label)}">
        <label class="slds-form-element__label">{!v.label}</label>
    </aura:if>

apply default css on aura component by 

    <aura:application extends="force:slds">
    <c:ContactRecCreation />
    </aura:application>


declare init method
        <aura:handler name="init" value="{!this}" action="{!c.showContacts}"/>

iteration in component ui
    <aura:iteration items="{!v.contactList}" var="contObj" indexVar="index">
            <tr>
                <td data-label="First Name" scope="row">
                <div class="slds-truncate" title="FirstName">{!contObj.FirstName}</div>
                </td>
                <td data-label="Last Name">
                <div class="slds-truncate" title="LastName">{!contObj.LastName}</div>
                </td>
            </tr>
    </aura:iteration>


in controller get value from ui attribute/variable
    var contactList = component.get("v.contactList");//v.contactList==>ui variable.
in controller set ui attribute value
    var temp='test'
    component.set("v.testData",temp);

in controller get value from ui by aura-id
    <lightning:input aura:id="fNumber" label="First Name" placeholder="Enter first name" />

    var firstNumber=component.find("fNumber").get("v.value");

data conversion sting to int in controller
    var firstNumber=parseInt(component.find("fNumber").get("v.value"));

controller set method parameter values
    var action=component.get("c.getAdditionalResult");
    action.setParams({ 'fNumber': component.get("v.fNumber",'sNumber':component.get("v.sNumber")) });

datatable==>git==>LightningDataTableExample

design component==> used the matadata defined component name from ui==>git ==>DesignComponentExample
lds==>lightning design system==> how to use salesforce ui on custom component==>git==>DesignComponentExample
        <aura:application extends="force:slds">
            <c:DualListBoxExample/>
        </aura:application>


application event
    application-event==>parent==>child

    create application-event==>git==>CalculatorApplicationEvent 
    create parent==>git==>CalculatorComponent
                        <aura:registerEvent name="appsEvent" type="c:CalculatorApplicationEvent" />

                        var sum = parseInt(component.get("v.firstNumber")) + parseInt(component.get("v.secondNumber"));
                        var eventObj = $A.get("e.c:CalculatorApplicationEvent");
                        eventObj.setParams({ "sumResult": sum });
        
                        eventObj.fire();

    create child==>git==>CalculatorResultComponent
                        <aura:handler event="c:CalculatorApplicationEvent" action="{!c.getResult}" />
                        <aura:attribute name="result" type="integer" />

                        getResult: function (component, event, helper) {
                        component.set("v.result", event.getParam("sumResult"));
                        }

component event
    create component-event==>git==>SelectValComponentEvent
    child==>git==>ComboBoxComponent
                <aura:registerEvent name="msgEvent" type="c:SelectValComponentEvent" />

                handleChange : function(component, event, helper) {
                var compEvent = component.getEvent("msgEvent");        
                compEvent.setParams({ "selectedVal": component.get("v.selOption") });        
                compEvent.fire();
	        }
    
    parent==>git==>ComboBoxComponentHandler
                <aura:attribute name="SelectedOptionValue" type="String" />
                <c:ComboBoxComponent msgEvent="{!c.showSelectedValue}" />

                showSelectedValue : function(component, event, helper) {
		            component.set("v.SelectedOptionValue",event.getParam("selectedVal"))
	            }


get current recordId on component==>git==>LightningPageExmple
        force:hasRecordId==> help to get recordId==><div>Record Id:{!v.recordId}</div>

                <aura:component implements="flexipage:availableForAllPageTypes,force:hasRecordId" access="global" >    
                    <lightning:card title="Lighting page Example">
                        <div>Record Id:{!v.recordId}</div>
                        Welcome to Lightning Page
                    </lightning:card>
                </aura:component>



                    
lightning lsds design system
    block-element-modifier
        block==>.house
        element==>.house__window
        modifier==>.house__window-big


apex get current login user
    https://sfdctechsolutions.blogspot.com/2021/07/get-current-user-information-in-apex.html
    UserInfo.getUserId()     

apex get current user profile
    Id profileId=userinfo.getProfileId();
    String profileName=[Select Id,Name from Profile where Id=:profileId].Name;
    system.debug('ProfileName'+profileName);

aura if condition

            <aura:if isTrue="{! v.saleODType == 'Ex-Farm/FOT'}">

                <h1 style="font-size:18px; margin: 10px;">The Create Contracts Site Object is NOT required.</h1>

            </aura:if>

get current user on apex
      public static Id userId {get{
        Id userId = UserInfo.getUserId();
        User u = [select id, contactId from User where id = : userId];
        Id getContactId = u.contactId;
        return getContactId;
    }set;}


apex from schema get field name and put in soql
    String queryInvoice = 'SELECT ';
    for(Schema.FieldSetMember f : SObjectType.Invoice__c.FieldSets.InvoiceFieldSet.getFields())
    {
           queryInvoice += f.getFieldPath() + ', ';
    }
    queryInvoice += 'Id FROM Invoice__c WHERE Id IN :invoiceIdList';        
    Map<Id,Invoice__c> creditNoteMap = new Map<Id,Invoice__c>((List<Invoice__c>)Database.Query(queryInvoice));
         
apex get object record type api name
    RecordType.DeveloperName = \'Credit_Note\'';
apex by name get recordtype/ record type id
    Id cNRecordType = Schema.SObjectType.Invoice__c.getRecordTypeInfosByName().get('Credit Note').getRecordTypeId();

apex clone an object
    Invoice__c tempCreditNote;
    tempCreditNote = inv.clone(false,true,false,false);

aura component value check is null 
    var someAttribute = component.get('v.someAttribute');
    if ($A.util.isUndefinedOrNull(someAttribute)) {

//
aura get recordId
    <aura:component implements="flexipage:availableForRecordHome,force:hasRecordId" controller="ContactListController" access="global" >
    </aura:component>

    var recordId= component.get("v.recordId")

call apex controller gethod

    aura controller
        https://www.sfdcstop.com/2018/01/salesforce-lightning-tutorial-part-1.html
        var action = component.get("c.getContactList");
        var accountId = component.get("v.recordId");
            
            action.setParams({
                accountIds: accountId
            });
            
        action.setCallback(this, function(response) {

            var state = response.getState();
            
            if(state === 'SUCCESS') {
        
                var contactList = response.getReturnValue();    
                component.set("v.contactList",contactList);
            }
            else {        
                alert('Error in getting data');
            }
        });
        
        $A.enqueueAction(action);
        
    apex controller
        @AuraEnabled
        public static List<Contact> getContactList(List<Id> accountIds) {
            // Getting the list of contacts from where Id is in accountIds
            List<Contact> contactList = [SELECT Id, Name, Email, Phone, AccountId FROM Contact WHERE AccountId in :accountIds];
            // Returning the contact list
            return contactList;
        }

used global event create new contact
    newContact: function(component, event, helper) {
        // Global event force:createRecord is used
        var createContact = $A.get("e.force:createRecord");
        // Parameters like apiName and defaultValues are set
        createContact.setParams({
            "entityApiName": "Contact",
            "defaultFieldValues": {
                "AccountId": component.get("v.recordId")
            }
        });
        // Event fired and new contact dialog open
        createContact.fire();
    }